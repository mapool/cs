
ui-set(name, value, important = false)

    apply = @() {
        if (important) {
            {name} value !important
        }
        else {
            {name} value
        }
    }

    if value is a 'unit'
        apply()

    else if value is not a 'null'
        apply()



ui-opacity(value)

    ui-set('opacity', value)

    if $support-ie8 and value is a 'unit'
        filter unquote('alpha(opacity=' + 100 * value + ')')

ui-ellipsis()
    overflow hidden
    text-overflow ellipsis
    white-space nowrap

ui-fluid(isImportant = false)

    if (isImportant) {
        display block !important
        width 100% !important
    }
    else {
        display block
        width 100%
    }

ui-justified(selector-item)

    display table

    > {selector-item}
        display table-cell
        width 1%



ui-collection(selector-item, hash = $size-hash, each = null)

    font-size 0

    ui-variant(,
        hash: hash,
        each: @(size, name) {

            > {selector-item} {
                + {selector-item} {
                    ui-set('margin-left', size['margin-horizontal'])
                    &{$selector-fluid} {
                        margin-left 0
                        ui-set('margin-top', size['margin-vertical'])
                    }
                }
            }

            if (each) {
                ui-apply(
                    style: @() {
                        each(size, name)
                    }
                )
            }

        }
    )


ui-collection-tight(selector-item, gap-item = 0)

    > {selector-item}
        + {selector-item}
            margin-left gap-item
            &{$selector-fluid}
                if gap-item != 0
                    margin-left 0
                margin-top gap-item

    if $support-mouse and gap-item < 0
        > {selector-item}
            {$selector-hover}
                position relative
                z-index 1


ui-collection-tight-side-radius(selector-item, hash = $size-hash)

    if !$support-ie or !$support-ie8

        &{$selector-round},
        &{$selector-radius}
            > {selector-item}

                &:not({$selector-fluid}):not(:first-child):not(:last-child)
                    border-radius 0

                &:not({$selector-fluid}):first-child
                    border-top-right-radius 0
                    border-bottom-right-radius 0

                &:not({$selector-fluid}):last-child
                    border-top-left-radius 0
                    border-bottom-left-radius 0

    else

        side-radius = @(radius) {
            border-radius 0
            &{$selector-fluid} {
                ui-set('border-radius', radius)
            }
            {$selector-first-child} {
                ui-set('border-top-left-radius', radius)
                ui-set('border-bottom-left-radius', radius)
            }
            {$selector-last-child} {
                ui-set('border-top-right-radius', radius)
                ui-set('border-bottom-right-radius', radius)
            }
        }

        ui-variant(
            hash: hash,
            each: @(size) {
                &{$selector-round} {
                    > {selector-item} {
                        side-radius(size['round'])
                    }
                }
                &{$selector-radius} {
                    > {selector-item} {
                        side-radius(size['radius'])
                    }
                }
            }
        )


ui-transition(property)

    if $transition-duration is a 'unit'
        transition-duration $transition-duration
        transition-property unquote(property)


ui-apply(style, selector = '')

    if selector
        {selector}
            style()
    else
        style()


ui-checked-cursor(selector = $selector-checked)

    ui-apply(
        selector: selector,
        style: @() {
            &,
            & > {$selector-icon} {
                ui-set('cursor', $cursor-checked)
            }
        }
    )


ui-disabled-cursor(selector = $selector-disabled)

    ui-apply(
        selector: selector,
        style: @() {
            &,
            & > {$selector-icon} {
                ui-set('cursor', $cursor-disabled)
            }
        }
    )


ui-variant(hash, each)

    for name in hash

        selector = '&'

        if name
            selector += '.' + name

        ui-apply(
            selector: selector,
            style: @() {
                each(hash[name], name)
            }
        )




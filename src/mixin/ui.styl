
ui()

    if @display == 'inline-block' or @display == 'inline'
        if !@vertical-align
            vertical-align baseline

ui-reset-form-element()

    outline 0
    border 0
    margin 0
    background-color transparent


ui-set(name, value, important = false)

    apply = @() {
        if (important) {
            {name} value !important
        }
        else {
            {name} value
        }
    }

    if value is a 'unit'
        if name == 'opacity' || value > 0
            apply()

    else if value
        apply()


ui-opacity(value)

    ui-set('opacity', value)

    if $support-ie8 and value
        filter unquote('alpha(opacity=' + 100 * value + ')')


ui-inline-to-inline-block()

    a&,
    b&,
    i&,
    em&,
    span&,
    label&,
    strong&
        display inline-block


ui-fluid()

    display block
    width 100%


ui-justified(selector-item)

    display table

    {selector-item}
        display table-cell
        width 1%


ui-link(color, has-hover)

    color color
    text-decoration none

    if $support-mouse and has-hover
        {$selector-hover}
            color darken(color, 10%)
            text-decoration underline

ui-apply(
        style,
        selector = '',
        selector-child = '',
        selector-grandchild = '')

    if selector
        {selector}
            if selector-child
                {selector-child}
                    if selector-grandchild
                        {selector-grandchild}
                            style()
                    else
                        style()
            else
                style()
    else
        style()



ui-style(bg = null, border = null, color = null)

    if bg is a 'rgba'
        background-color bg

    if border is a 'rgba'
        border-color border

    if color is a 'rgba'
        color color


ui-status(
        bg = null, bg-offset = null,
        border = null, border-offset = null,
        color = null, color-offset = null,
        selector = '',
        important = false,
        extra = null)

    offset = @(color, offset) {

        if (color is a 'rgba' and offset is a 'unit') {
            if (offset > 0) {
                color = darken(color, offset)
            }
            else if (offset < 0) {
                color = lighten(color, -1 * offset)
            }
        }

        return color
    }

    ui-apply(
        selector: selector,
        style: @() {

            ui-set('background-color', offset(bg, bg-offset), important)
            ui-set('border-color', offset(border, border-offset), important)
            ui-set('color', offset(color, color-offset), important)

            if (extra is a 'function') {
                extra()
            }
        }
    )


ui-hover(bg = null, border = null, color = null, selector = $selector-hover)

    ui-status(bg, 5%, border, 6%, color, 2%, selector)


ui-active(bg = null, border = null, color = null, selector = $selector-active)

    ui-status(bg, 15%, border, 14%, color, 3%, selector)


ui-focus(bg = null, border = null, color = null, selector = $selector-focus)

    ui-active(bg, border, color, selector)


ui-checked(bg = null, border = null, color = null, selector = $selector-checked)

    ui-active(bg, border, color, selector)


ui-disabled(bg = null, border = null, color = null, selector = $selector-disabled)

    ui-status(bg, -35%, border, -30%, color, -60%, selector, true, @() {

        &,
        & > i {
            ui-set('cursor', $cursor-disabled)
        }

    })





ui-variant(
            hash,
            each,
            selector-append = '',
            selector-child = '',
            selector-grandchild = '')

    for name in hash

        selector = '&'

        if name
            selector += '.' + name

        if selector-append
            selector += selector-append;

        ui-apply(
            selector: selector,
            selector-child: selector-child,
            selector-grandchild: selector-grandchild,
            style: @() {
                each(hash[name], name)
            }
        )



ui-brand-variant(
                each,
                level = '',
                reversed = false,
                brand-hash = $brand-hash,
                selector-append = '',
                selector-child = '',
                selector-grandchild = '')

    ui-variant(
        hash: brand-hash,
        selector-append: selector-append,
        selector-child: selector-child,
        selector-grandchild: selector-grandchild,
        each: @(hash) {

            item = hash[level]

            bg = item['bg']
            color = item['fg']

            if (reversed) {
                bg = item['fg']
                color = item['bg']
            }

            border = darken(bg, 20%)

            each(
                bg: bg,
                color: color,
                border: border
            )

        }
    )






ui-size-variant(
                each,
                size-hash = $size-hash,
                selector-append = '',
                selector-child = '',
                selector-grandchild = '')

    ui-variant(
        hash: size-hash,
        selector-append: selector-append,
        selector-child: selector-child,
        selector-grandchild: selector-grandchild,
        each: @(item) {
            each(item)
        }
    )

